/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: SetServoAngle_.idl
  Source: SetServoAngle_.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_SETSERVOANGLE__HPP
#define DDSCXX_SETSERVOANGLE__HPP

#include <cstdint>

namespace unitree_arm
{
namespace msg
{
namespace dds_
{
class SetServoAngle_
{
private:
 int32_t seq__ = 0;
 uint8_t id__ = 0;
 float angle__ = 0.0f;
 int16_t delay_ms__ = 0;

public:
  SetServoAngle_() = default;

  explicit SetServoAngle_(
    int32_t seq_,
    uint8_t id_,
    float angle_,
    int16_t delay_ms_) :
    seq__(seq_),
    id__(id_),
    angle__(angle_),
    delay_ms__(delay_ms_) { }

  int32_t seq_() const { return this->seq__; }
  int32_t& seq_() { return this->seq__; }
  void seq_(int32_t _val_) { this->seq__ = _val_; }
  uint8_t id_() const { return this->id__; }
  uint8_t& id_() { return this->id__; }
  void id_(uint8_t _val_) { this->id__ = _val_; }
  float angle_() const { return this->angle__; }
  float& angle_() { return this->angle__; }
  void angle_(float _val_) { this->angle__ = _val_; }
  int16_t delay_ms_() const { return this->delay_ms__; }
  int16_t& delay_ms_() { return this->delay_ms__; }
  void delay_ms_(int16_t _val_) { this->delay_ms__ = _val_; }

  bool operator==(const SetServoAngle_& _other) const
  {
    (void) _other;
    return seq__ == _other.seq__ &&
      id__ == _other.id__ &&
      angle__ == _other.angle__ &&
      delay_ms__ == _other.delay_ms__;
  }

  bool operator!=(const SetServoAngle_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::unitree_arm::msg::dds_::SetServoAngle_>::getTypeName()
{
  return "unitree_arm::msg::dds_::SetServoAngle_";
}

template <> constexpr bool TopicTraits<::unitree_arm::msg::dds_::SetServoAngle_>::isKeyless()
{
  return true;
}

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::unitree_arm::msg::dds_::SetServoAngle_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::unitree_arm::msg::dds_::SetServoAngle_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::unitree_arm::msg::dds_::SetServoAngle_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::unitree_arm::msg::dds_::SetServoAngle_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::unitree_arm::msg::dds_::SetServoAngle_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.seq_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.id_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.angle_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.delay_ms_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::unitree_arm::msg::dds_::SetServoAngle_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_arm::msg::dds_::SetServoAngle_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::unitree_arm::msg::dds_::SetServoAngle_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.seq_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.id_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.angle_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.delay_ms_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::unitree_arm::msg::dds_::SetServoAngle_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_arm::msg::dds_::SetServoAngle_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::unitree_arm::msg::dds_::SetServoAngle_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.seq_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.id_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.angle_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.delay_ms_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::unitree_arm::msg::dds_::SetServoAngle_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_arm::msg::dds_::SetServoAngle_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::unitree_arm::msg::dds_::SetServoAngle_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.seq_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.id_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.angle_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.delay_ms_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::unitree_arm::msg::dds_::SetServoAngle_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_arm::msg::dds_::SetServoAngle_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_SETSERVOANGLE__HPP
