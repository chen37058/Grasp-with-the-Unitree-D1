/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: ArmString_.idl
  Source: ArmString_.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_ARMSTRING__HPP
#define DDSCXX_ARMSTRING__HPP

#include <string>

namespace unitree_arm
{
namespace msg
{
namespace dds_
{
class ArmString_
{
private:
 std::string data__;

public:
  ArmString_() = default;

  explicit ArmString_(
    const std::string& data_) :
    data__(data_) { }

  const std::string& data_() const { return this->data__; }
  std::string& data_() { return this->data__; }
  void data_(const std::string& _val_) { this->data__ = _val_; }
  void data_(std::string&& _val_) { this->data__ = _val_; }

  bool operator==(const ArmString_& _other) const
  {
    (void) _other;
    return data__ == _other.data__;
  }

  bool operator!=(const ArmString_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::unitree_arm::msg::dds_::ArmString_>::getTypeName()
{
  return "unitree_arm::msg::dds_::ArmString_";
}

template <> constexpr bool TopicTraits<::unitree_arm::msg::dds_::ArmString_>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::unitree_arm::msg::dds_::ArmString_>::isKeyless()
{
  return true;
}

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::unitree_arm::msg::dds_::ArmString_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::unitree_arm::msg::dds_::ArmString_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::unitree_arm::msg::dds_::ArmString_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::unitree_arm::msg::dds_::ArmString_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::unitree_arm::msg::dds_::ArmString_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.data_(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::unitree_arm::msg::dds_::ArmString_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_arm::msg::dds_::ArmString_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::unitree_arm::msg::dds_::ArmString_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.data_(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::unitree_arm::msg::dds_::ArmString_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_arm::msg::dds_::ArmString_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::unitree_arm::msg::dds_::ArmString_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.data_(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::unitree_arm::msg::dds_::ArmString_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_arm::msg::dds_::ArmString_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::unitree_arm::msg::dds_::ArmString_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.data_(), 0))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::unitree_arm::msg::dds_::ArmString_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_arm::msg::dds_::ArmString_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_ARMSTRING__HPP
