/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: PubServoInfo_.idl
  Source: PubServoInfo_.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_PUBSERVOINFO__HPP
#define DDSCXX_PUBSERVOINFO__HPP


namespace unitree_arm
{
namespace msg
{
namespace dds_
{
class PubServoInfo_
{
private:
 float servo0_data__ = 0.0f;
 float servo1_data__ = 0.0f;
 float servo2_data__ = 0.0f;
 float servo3_data__ = 0.0f;
 float servo4_data__ = 0.0f;
 float servo5_data__ = 0.0f;
 float servo6_data__ = 0.0f;

public:
  PubServoInfo_() = default;

  explicit PubServoInfo_(
    float servo0_data_,
    float servo1_data_,
    float servo2_data_,
    float servo3_data_,
    float servo4_data_,
    float servo5_data_,
    float servo6_data_) :
    servo0_data__(servo0_data_),
    servo1_data__(servo1_data_),
    servo2_data__(servo2_data_),
    servo3_data__(servo3_data_),
    servo4_data__(servo4_data_),
    servo5_data__(servo5_data_),
    servo6_data__(servo6_data_) { }

  float servo0_data_() const { return this->servo0_data__; }
  float& servo0_data_() { return this->servo0_data__; }
  void servo0_data_(float _val_) { this->servo0_data__ = _val_; }
  float servo1_data_() const { return this->servo1_data__; }
  float& servo1_data_() { return this->servo1_data__; }
  void servo1_data_(float _val_) { this->servo1_data__ = _val_; }
  float servo2_data_() const { return this->servo2_data__; }
  float& servo2_data_() { return this->servo2_data__; }
  void servo2_data_(float _val_) { this->servo2_data__ = _val_; }
  float servo3_data_() const { return this->servo3_data__; }
  float& servo3_data_() { return this->servo3_data__; }
  void servo3_data_(float _val_) { this->servo3_data__ = _val_; }
  float servo4_data_() const { return this->servo4_data__; }
  float& servo4_data_() { return this->servo4_data__; }
  void servo4_data_(float _val_) { this->servo4_data__ = _val_; }
  float servo5_data_() const { return this->servo5_data__; }
  float& servo5_data_() { return this->servo5_data__; }
  void servo5_data_(float _val_) { this->servo5_data__ = _val_; }
  float servo6_data_() const { return this->servo6_data__; }
  float& servo6_data_() { return this->servo6_data__; }
  void servo6_data_(float _val_) { this->servo6_data__ = _val_; }

  bool operator==(const PubServoInfo_& _other) const
  {
    (void) _other;
    return servo0_data__ == _other.servo0_data__ &&
      servo1_data__ == _other.servo1_data__ &&
      servo2_data__ == _other.servo2_data__ &&
      servo3_data__ == _other.servo3_data__ &&
      servo4_data__ == _other.servo4_data__ &&
      servo5_data__ == _other.servo5_data__ &&
      servo6_data__ == _other.servo6_data__;
  }

  bool operator!=(const PubServoInfo_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::unitree_arm::msg::dds_::PubServoInfo_>::getTypeName()
{
  return "unitree_arm::msg::dds_::PubServoInfo_";
}

template <> constexpr bool TopicTraits<::unitree_arm::msg::dds_::PubServoInfo_>::isKeyless()
{
  return true;
}

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::unitree_arm::msg::dds_::PubServoInfo_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::unitree_arm::msg::dds_::PubServoInfo_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::unitree_arm::msg::dds_::PubServoInfo_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::unitree_arm::msg::dds_::PubServoInfo_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::unitree_arm::msg::dds_::PubServoInfo_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.servo0_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.servo1_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.servo2_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.servo3_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.servo4_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.servo5_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.servo6_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::unitree_arm::msg::dds_::PubServoInfo_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_arm::msg::dds_::PubServoInfo_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::unitree_arm::msg::dds_::PubServoInfo_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.servo0_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.servo1_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.servo2_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.servo3_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.servo4_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.servo5_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.servo6_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::unitree_arm::msg::dds_::PubServoInfo_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_arm::msg::dds_::PubServoInfo_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::unitree_arm::msg::dds_::PubServoInfo_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.servo0_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.servo1_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.servo2_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.servo3_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.servo4_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.servo5_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.servo6_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::unitree_arm::msg::dds_::PubServoInfo_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_arm::msg::dds_::PubServoInfo_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::unitree_arm::msg::dds_::PubServoInfo_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.servo0_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.servo1_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.servo2_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.servo3_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.servo4_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.servo5_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.servo6_data_()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::unitree_arm::msg::dds_::PubServoInfo_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_arm::msg::dds_::PubServoInfo_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_PUBSERVOINFO__HPP
